{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","umiss-frontend/tests/app.lint-test.js","umiss-frontend/tests/helpers/destroy-app.js","umiss-frontend/tests/helpers/ember-simple-auth.js","umiss-frontend/tests/helpers/module-for-acceptance.js","umiss-frontend/tests/helpers/resolver.js","umiss-frontend/tests/helpers/start-app.js","umiss-frontend/tests/test-helper.js","umiss-frontend/tests/tests.lint-test.js","umiss-frontend/tests/unit/adapters/application-test.js","umiss-frontend/tests/unit/controllers/login-test.js","umiss-frontend/tests/unit/models/galvanicresistance-test.js","umiss-frontend/tests/unit/models/heartbeats-test.js","umiss-frontend/tests/unit/models/monitor-test.js","umiss-frontend/tests/unit/models/skin-temperature-test.js","umiss-frontend/tests/unit/routes/application-test.js","umiss-frontend/tests/unit/routes/dashboard-test.js","umiss-frontend/tests/unit/routes/dashboard/galvanicresistance/index-test.js","umiss-frontend/tests/unit/routes/dashboard/heartbeat/index-test.js","umiss-frontend/tests/unit/routes/dashboard/skintemperature/index-test.js","umiss-frontend/tests/unit/routes/heartbeats-test.js","umiss-frontend/tests/unit/routes/login-test.js","umiss-frontend/tests/unit/routes/signup-test.js","umiss-frontend/tests/unit/serializers/application-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('umiss-frontend/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/drf-token-authenticator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/drf-token-authenticator.js should pass ESLint\\n\\n33:24 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('authorizers/drf-token-authorizer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/drf-token-authorizer.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/dashboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/dashboard.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/dashboard/galvanicresistance/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/dashboard/galvanicresistance/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/dashboard/heartbeat/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/dashboard/heartbeat/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/dashboard/skintemperature/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/dashboard/skintemperature/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/foo.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/foo.js should pass ESLint\\n\\n38:58 - \\'moment\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/galvanic-resistance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/galvanic-resistance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/heart-beat.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/heart-beat.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/monitor.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/monitor.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/skin-temperature.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/skin-temperature.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n3:8 - \\'ENV\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/dashboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/dashboard.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/dashboard/galvanicresistance/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/dashboard/galvanicresistance/index.js should pass ESLint\\n\\n12:9 - \\'store\\' is assigned a value but never used. (no-unused-vars)\\n23:21 - \\'reason\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/dashboard/heartbeat/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/dashboard/heartbeat/index.js should pass ESLint\\n\\n12:9 - \\'store\\' is assigned a value but never used. (no-unused-vars)\\n23:21 - \\'reason\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/dashboard/skintemperature/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/dashboard/skintemperature/index.js should pass ESLint\\n\\n12:9 - \\'store\\' is assigned a value but never used. (no-unused-vars)\\n23:21 - \\'reason\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/foo.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/foo.js should pass ESLint\\n\\n12:9 - \\'store\\' is assigned a value but never used. (no-unused-vars)\\n23:21 - \\'reason\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/signup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/signup.js should pass ESLint\\n\\n19:16 - \\'response\\' is defined but never used. (no-unused-vars)\\n23:17 - \\'response\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/application.js should pass ESLint\\n\\n5:12 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('themes/umiss-theme.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'themes/umiss-theme.js should pass ESLint\\n\\n');\n  });\n});","define('umiss-frontend/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n    if (window.server) {\n      window.server.shutdown();\n    }\n  }\n});","define('umiss-frontend/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});\n/* global wait */","define('umiss-frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'umiss-frontend/tests/helpers/start-app', 'umiss-frontend/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _umissFrontendTestsHelpersStartApp, _umissFrontendTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _umissFrontendTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _umissFrontendTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('umiss-frontend/tests/helpers/resolver', ['exports', 'umiss-frontend/resolver', 'umiss-frontend/config/environment'], function (exports, _umissFrontendResolver, _umissFrontendConfigEnvironment) {\n\n  var resolver = _umissFrontendResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _umissFrontendConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _umissFrontendConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('umiss-frontend/tests/helpers/start-app', ['exports', 'ember', 'umiss-frontend/app', 'umiss-frontend/config/environment'], function (exports, _ember, _umissFrontendApp, _umissFrontendConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _umissFrontendConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _umissFrontendApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('umiss-frontend/tests/test-helper', ['exports', 'umiss-frontend/tests/helpers/resolver', 'ember-qunit'], function (exports, _umissFrontendTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_umissFrontendTestsHelpersResolver['default']);\n});","define('umiss-frontend/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/galvanicresistance-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/galvanicresistance-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/heartbeats-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/heartbeats-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/monitor-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/monitor-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/skin-temperature-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/skin-temperature-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/dashboard-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboard-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/dashboard/galvanicresistance/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboard/galvanicresistance/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/dashboard/heartbeat/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboard/heartbeat/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/dashboard/skintemperature/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboard/skintemperature/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/heartbeats-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/heartbeats-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/signup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/signup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n});","define('umiss-frontend/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('umiss-frontend/tests/unit/controllers/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('umiss-frontend/tests/unit/models/galvanicresistance-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('galvanicresistance', 'Unit | Model | galvanicresistance', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('umiss-frontend/tests/unit/models/heartbeats-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('heartbeats', 'Unit | Model | heartbeats', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('umiss-frontend/tests/unit/models/monitor-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('umiss-frontend/tests/unit/models/skin-temperature-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('skin-temperature', 'Unit | Model | skin temperature', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('umiss-frontend/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('umiss-frontend/tests/unit/routes/dashboard-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboard', 'Unit | Route | dashboard', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('umiss-frontend/tests/unit/routes/dashboard/galvanicresistance/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboard/galvanicresistance/index', 'Unit | Route | dashboard/galvanicresistance/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('umiss-frontend/tests/unit/routes/dashboard/heartbeat/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboard/heartbeat/index', 'Unit | Route | dashboard/heartbeat/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('umiss-frontend/tests/unit/routes/dashboard/skintemperature/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:dashboard/skintemperature/index', 'Unit | Route | dashboard/skintemperature/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('umiss-frontend/tests/unit/routes/heartbeats-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:heartbeats', 'Unit | Route | heartbeats', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('umiss-frontend/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('umiss-frontend/tests/unit/routes/signup-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:signup', 'Unit | Route | signup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('umiss-frontend/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","require('umiss-frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingslCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbvdA;AACA;","file":"tests.js"}